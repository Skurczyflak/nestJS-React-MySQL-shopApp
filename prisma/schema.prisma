// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  title       String
  description String
  shortDesc   String
  colors      Json
  images      Json
  rating      Float
  price       Float

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cartItems   CartItem[]
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  login     String   @unique
  password  String
  isAdmin   Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  cart      Cart?
  orders    Order[]
}

model CartItem {
  id        String   @id @default(uuid())
  productId String
  cartId    String
  color     String
  quantity  Int @default(1)
  comment   String?
  price     Float
  image     String?
  name      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String      @id @default(uuid())
  userId    String     @unique
  items     CartItem[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id        String   @id @default(uuid())
  userId    String
  items     Json
  address   String
  total     Float
  status    OrderStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}